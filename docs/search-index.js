crystal_doc_search_index_callback({"repository_name":"","body":"# naive_mather\n\nCalculates the result of a basic math equation stored\nin a String.\n```\nNaiveMather.calculate(\"3 + 4 * (3 + 4)\")\n => 31\n```\nOnly handles +, -, *, /, and parentheses.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n```yaml\ndependencies:\n  naive_mather:\n    github: blazerw/naive_mather\n```\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"naive_mather\"\n```\n\nJust pass your equation String to NaiveMather.calculate()\n\n## Development\n\nFollow Crystal's guidelines: https://crystal-lang.org/reference/guides/writing_shards.html and realize that I'm using [Spec2](https://github.com/waterlink/spec2.cr) for testing, specifically this [fork](https://github.com/ThunderKey/spec2.cr)\n\n## Contributing\n\n1. Fork it (<https://github.com/blazerw/naive_mather/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Randy Wilson](https://github.com/blazerw) - creator and maintainer\n  [Lukasz Wrobel](https://lukaszwrobel.pl/) - Ruby version, the \"real\" creator\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/NaiveMather","path":"NaiveMather.html","kind":"module","full_name":"NaiveMather","name":"NaiveMather","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEBUG","name":"DEBUG","value":"false","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Calculates simple math equations, like \"2 + 3 * (2 + 4)\"\nBased on Ruby code written for blog by\nLukasz Wrobel.\nhttps://lukaszwrobel.pl/blog/math-parser-part-3-implementation/","summary":"<p>Calculates simple math equations, like \"2 + 3 * (2 + 4)\" Based on Ruby code written for blog by Lukasz Wrobel.</p>","class_methods":[{"id":"calculate(equation:String?)-class-method","html_id":"calculate(equation:String?)-class-method","name":"calculate","doc":"Returns the result of calculating the passed equation.\n\n```\nNativeMather.calculate(\"2 + 3\") # => 5\n```","summary":"<p>Returns the result of calculating the passed equation.</p>","abstract":false,"args":[{"name":"equation","doc":null,"default_value":"","external_name":"equation","restriction":"String | Nil"}],"args_string":"(equation : String?)","source_link":null,"source_link":null,"def":{"name":"calculate","args":[{"name":"equation","doc":null,"default_value":"","external_name":"equation","restriction":"String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if equation.nil?\n  return 0\nend\nparser = NaiveMather::Parser.new\nparser.parse(equation.not_nil!)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/NaiveMather/Lexer","path":"NaiveMather/Lexer.html","kind":"class","full_name":"NaiveMather::Lexer","name":"Lexer","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/NaiveMather","kind":"module","full_name":"NaiveMather","name":"NaiveMather"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(input:String)-class-method","html_id":"new(input:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"args_string":"(input : String)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(input)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get_next_token:Token?-instance-method","html_id":"get_next_token:Token?-instance-method","name":"get_next_token","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Token?","source_link":null,"source_link":null,"def":{"name":"get_next_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token | Nil","visibility":"Public","body":"if @return_previous_token\n  @return_previous_token = false\n  return @previous_token\nend\ntoken = Token.new\nif @input\n  @input = @input.not_nil!.lstrip\n  case @input\n  when /\\A\\+/\n    token.kind = Token::Plus\n  when /\\A-/\n    token.kind = Token::Minus\n  when /\\A\\*/\n    token.kind = Token::Multiply\n  when /\\A\\//\n    token.kind = Token::Divide\n  when /\\A\\d+(\\.\\d+)?/\n    token.kind = Token::Number\n    token.value = $~[0].to_i32\n  when /\\A\\(/\n    token.kind = Token::LParen\n  when /\\A\\)/\n    token.kind = Token::RParen\n  when \"\"\n    token.kind = Token::End\n  end\n  if token.unknown?\n    raise(Exception.new(\"Unknown token\"))\n  end\n  begin\n    match_data = $~\n    @input = match_data.post_match\n  rescue e\n    @input = nil\n  end\nend\n@previous_token = token\ntoken\n"}},{"id":"revert-instance-method","html_id":"revert-instance-method","name":"revert","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"revert","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@return_previous_token = true"}}],"macros":[],"types":[]},{"html_id":"/NaiveMather/Parser","path":"NaiveMather/Parser.html","kind":"class","full_name":"NaiveMather::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/NaiveMather","kind":"module","full_name":"NaiveMather","name":"NaiveMather"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"parse(input)-instance-method","html_id":"parse(input)-instance-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":""}],"args_string":"(input)","source_link":null,"source_link":null,"def":{"name":"parse","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  @lexer = Lexer.new(input)\n  expression_value = expression\n  token = lexer.get_next_token\n  if token && (token.kind == Token::End)\n    expression_value\n  else\n    raise(\"End expected\")\n  end\nrescue e\n  if show_error_message?(e)\n    puts(e.message)\n  end\n  if DEBUG\n    puts(e.backtrace.join(\"\\n\"))\n  end\n  nil\nend"}}],"macros":[],"types":[]},{"html_id":"/NaiveMather/Token","path":"NaiveMather/Token.html","kind":"class","full_name":"NaiveMather::Token","name":"Token","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Divide","name":"Divide","value":"3","doc":null,"summary":null},{"id":"End","name":"End","value":"7","doc":null,"summary":null},{"id":"LParen","name":"LParen","value":"5","doc":null,"summary":null},{"id":"Minus","name":"Minus","value":"1","doc":null,"summary":null},{"id":"Multiply","name":"Multiply","value":"2","doc":null,"summary":null},{"id":"Number","name":"Number","value":"4","doc":null,"summary":null},{"id":"Plus","name":"Plus","value":"0","doc":null,"summary":null},{"id":"RParen","name":"RParen","value":"6","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/NaiveMather","kind":"module","full_name":"NaiveMather","name":"NaiveMather"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"kind:Int32?-instance-method","html_id":"kind:Int32?-instance-method","name":"kind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"source_link":null,"def":{"name":"kind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind"}},{"id":"kind=(kind)-instance-method","html_id":"kind=(kind)-instance-method","name":"kind=","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"args_string":"(kind)","source_link":null,"source_link":null,"def":{"name":"kind=","args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind = kind"}},{"id":"unknown?-instance-method","html_id":"unknown?-instance-method","name":"unknown?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"unknown?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.nil?"}},{"id":"value:Int32?-instance-method","html_id":"value:Int32?-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}},{"id":"value=(value)-instance-method","html_id":"value=(value)-instance-method","name":"value=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":null,"source_link":null,"def":{"name":"value=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = value"}}],"macros":[],"types":[]}]}]}})